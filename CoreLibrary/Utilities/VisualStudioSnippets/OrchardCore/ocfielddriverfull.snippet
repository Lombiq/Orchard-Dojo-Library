<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Orchard Core Content Field Display Driver with methods</Title>
      <Shortcut>ocfielddriverfull</Shortcut>
      <Description>Code snippet for a full ContentFieldDisplayDriver implementation with display/edit/update methods.</Description>
      <Author>Lombiq Technologies</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Name of the field.</ToolTip>
          <Default>My</Default>
        </Literal>
      </Declarations>
      <Imports>
        <Import>
          <Namespace>OrchardCore.ContentManagement.Display.ContentDisplay</Namespace>
        </Import>
        <Import>
          <Namespace>OrchardCore.ContentManagement.Display.Models</Namespace>
        </Import>
        <Import>
          <Namespace>OrchardCore.DisplayManagement.ModelBinding</Namespace>
        </Import>
        <Import>
          <Namespace>OrchardCore.DisplayManagement.Views</Namespace>
        </Import>
        <Import>
          <Namespace>System.Threading.Tasks</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp">
        <![CDATA[public class $name$FieldDisplayDriver : ContentFieldDisplayDriver<$name$Field$end$>
        {
            public override IDisplayResult Display($name$Field field, BuildFieldDisplayContext fieldDisplayContext) =>
                Initialize<$name$FieldViewModel>(
                    GetDisplayShapeType(fieldDisplayContext), 
                    viewModel => PopulateViewModel(field, viewModel))
                .Location("Detail", "Content:5")
                .Location("Summary", "Content:5");

            public override IDisplayResult Edit($name$Field field, BuildFieldEditorContext context) =>
                Initialize<$name$FieldViewModel>(
                    GetEditorShapeType(context), 
                    viewModel => PopulateViewModel(field, viewModel))
                .Location("Content:5");

            public override async Task<IDisplayResult> UpdateAsync($name$Field field, IUpdateModel updater, UpdateFieldEditorContext context)
            {
                var viewModel = new $name$FieldViewModel();

                await updater.TryUpdateModelAsync(viewModel, Prefix);

                // Populate field from view model here.

                return await EditAsync(field, context);
            }

            private static void PopulateViewModel($name$Field field, $name$FieldViewModel viewModel)
            {
                // Populate view model from field here.
            }
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>